import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

class Counter extends RecursiveTask<Long> {
    private long begin;
    private long end;

    public Counter(long begin, long end) {
        this.begin = begin;
        this.end = end;
    }

    @Override
    protected Long compute() {
        long sum = 0;
        ArrayList<Counter> arrays = new ArrayList<>();
        // 当工作量足够小，小到开头和结尾间隔小于100，则直接计算
        if(end - begin <= 100) {
            while(begin <= end) {
                if(isPrime(begin)) {
                    sum += begin;
                }
                begin++;
            }
        }else {
            long gap = (end - begin + 1) / 100;
            long start = begin;
            for(int i = 0; i < 100; i++) {
                long last = start + gap;
                if(last > end) {
                    last = end;
                }
                Counter counter = new Counter(start, last);
                // 将当前线程加入到列表中
                arrays.add(counter);
            }
            invokeAll(arrays);
            for(Counter e: arrays) {
                sum += e.join();
            }
        }
        return sum;
    }
    public boolean isPrime(long number) {
        if(number == 1)
            return false;
        for(int i = 2; i <= Math.sqrt(number); i++) {
            if(number % i == 0) {
                return false;
            }
        }
        return true;

    }
}

public class B{
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        ForkJoinPool pool = new ForkJoinPool();
        Counter test = new Counter(1, 100000000L);
        ForkJoinTask<Long> task = pool.submit(test);
        long result = 0;
        result = task.get();
        System.out.println(result);
    }

}

#include <bits/stdc++.h>
using namespace std;
void adjustHeap(vector<int> &num, int i, int len) {
    int maxIndex = i;
    int left = 2 * i + 1; // 左右孩子的索引
    int right = 2 * i + 2;
    if(left < len && num[left] > num[maxIndex]) {
        maxIndex = left;
    }
    if(right < len && num[right] > num[maxIndex]) {
        maxIndex = right;
    }
    if(maxIndex != i) {
        swap(num[maxIndex], num[i]);
        adjustHeap(num, maxIndex, len);
    }
}
void buildHeap(vector<int> &num) {
    // 从最后一个非叶子节点开始向上构造最大堆
    // 在数组中第一个元素的索引是0
    // 第n个元素的左孩子为2n+1，右孩子为2n+2，
    // 最后一个非子节点位置在(n - 1) / 2
    int len =  num.size();
    for(int i = len / 2 -1; i >= 0; i--) {
        adjustHeap(num, i, len);
    }
}
void HeapSort(vector<int> &num) {
    int len = num.size();
    if(len < 1)
        return;
    //1. 构建一个最大堆
    buildHeap(num);
}
int main() {
    vector<int> num = {6,10,7,8,1,3,2,5,4,9};
    HeapSort(num);
    int len = num.size();
    while(len > 0) {
        swap(num[0], num[len-1]);
        len--;
        adjustHeap(num,0,len);
    }
    for(auto x: num) {
        cout<<x<<endl;
    }
}